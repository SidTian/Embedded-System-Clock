#include <Arduino.h>
// 定义段引脚 (a-g)，使用安全的 GPIO
const int segPins[] = {13, 14, 15, 18, 19, 21, 22}; // a, b, c, d, e, f, g
const int digitPins[] = {23, 16, 17, 25};           // D1, D2, D3, D4
const int dpPin = 26;                               // 时钟点引脚
const int lightPins[] = {2, 4, 5};                  // light1, light2, light3
const int buttonPins[] = {27, 32, 33};              // button1, button2, button3

// 定义数字显示的段表 (0-9)，使用位图
const unsigned char numberPatterns[10] = {
    0b1111110, // 0: a, b, c, d, e, f
    0b0110000, // 1: b, c
    0b1101101, // 2: a, b, d, e, g
    0b1111001, // 3: a, b, c, d, g
    0b0110011, // 4: b, c, f, g
    0b1011011, // 5: a, c, d, f, g
    0b1011111, // 6: a, c, d, e, f, g
    0b1110000, // 7: a, b, c
    0b1111111, // 8: a, b, c, d, e, f, g
    0b1111011  // 9: a, b, c, f, g
};

// 按钮相关全局变量
const int numButtons = 3;                                          // 按钮数量
int buttonStates[numButtons] = {0, 0, 0};                          // 当前按钮状态数组（0 未按下，1 按下）
static int lastButtonStates[numButtons] = {1, 1, 1};               // 上次按钮状态数组
static unsigned long lastButtonPressTimes[numButtons] = {0, 0, 0}; // 上次按下时间戳数组
const int debounceDelay = 50;                                      // 去抖延时（毫秒）

// 声明函数原型
void setup(void);
void clear(void);
void displayNumber(int num);
void displayDigit(int digit, int position);
void displayColon(void);
void loop(void);

void setup(void)
{
  for (int i = 0; i < 7; i++)
    pinMode(segPins[i], OUTPUT);

  for (int i = 0; i < 4; i++)
    pinMode(digitPins[i], OUTPUT);

  pinMode(dpPin, OUTPUT);
  digitalWrite(dpPin, LOW); // 默认关闭时钟点

  for (int i = 0; i < 3; i++)
  {
    pinMode(lightPins[i], OUTPUT);
    digitalWrite(lightPins[i], LOW); // 默认关闭 light
  }

  Serial.begin(115200);
  Serial.println("Serial Test OK");
}

void clear(void)
{
  for (int i = 0; i < 7; i++)
    digitalWrite(segPins[i], LOW); // 共阴极数码管，段引脚低电平熄灭
}

void displayNumber(int num)
{
  clear();
  unsigned char pattern = numberPatterns[num];
  for (int i = 0; i < 7; i++)
    digitalWrite(segPins[i], (pattern >> (6 - i)) & 0x01); // 共阴极数码管，段引脚高电平点亮
}

void displayDigit(int digit, int position)
{
  // 关闭所有位选引脚
  for (int i = 0; i < 4; i++)
    digitalWrite(digitPins[i], HIGH);

  digitalWrite(dpPin, LOW); // dpPin
  // 显示当前位的数字
  displayNumber(digit);
  // 使能当前位
  digitalWrite(digitPins[position], LOW);
}

void displayColon(void)
{
  // 关闭所有位选引脚
  for (int i = 0; i < 4; i++)
    digitalWrite(digitPins[i], HIGH);

  clear();
  // 点亮时钟点
  digitalWrite(digitPins[1], LOW); // D2
  digitalWrite(dpPin, HIGH);       // dpPin
}

void loop(void)
{
  static int minutes = 14;             // 使用 static 变量保存分钟数
  static int seconds = 23;             // 使用 static 变量保存秒钟数
  static unsigned long lastUpdate = 0; // 上次更新的时间戳（用于时间计数）
  static unsigned long lastScan = 0;   // 上次扫描的时间戳（用于多路复用）
  static int scanPosition = 0;         // 当前扫描的位置（0-4，表示 D1, D2, D3, D4, colon）

  // 获取当前时间（毫秒）
  unsigned long currentTime = millis();

  // 检测按钮状态
  for (int i = 0; i < numButtons; i++)
  {
    // 读取按钮电压值
    int buttonVoltage = analogRead(buttonPins[i]);          // 读取 0-4095 的电压值
    int currentButtonState = (buttonVoltage < 500) ? 0 : 1; // 电压低于 500 视为按下 (LOW)

    // 去抖逻辑：检测按钮状态变化
    if (currentButtonState != lastButtonStates[i])
    {
      if (currentTime - lastButtonPressTimes[i] > debounceDelay)
      {
        if (currentButtonState == 0) // 按下 (从 HIGH 到 LOW)
        {
          buttonStates[i] = 1; // 更新按钮状态为按下
          Serial.print("Button ");
          Serial.print(i + 1);
          Serial.println(" pressed!");
        }
        else // 松开 (从 LOW 到 HIGH)
        {
          buttonStates[i] = 0; // 更新按钮状态为未按下
          Serial.print("Button ");
          Serial.print(i + 1);
          Serial.println(" released!");
        }
        lastButtonPressTimes[i] = currentTime; // 更新时间戳
      }
      lastButtonStates[i] = currentButtonState; // 更新状态
    }
  }

  // 每秒更新一次时间
  if (currentTime - lastUpdate >= 1000) // 1000ms = 1s
  {
    seconds++;         // 秒钟数增加 1
    if (seconds >= 60) // 如果秒钟数达到 60
    {
      seconds = 0;       // 秒钟数重置为 0
      minutes++;         // 分钟数增加 1
      if (minutes >= 60) // 如果分钟数达到 60
      {
        minutes = 0; // 分钟数重置为 0
      }
    }
    lastUpdate = currentTime; // 更新时间戳
  }

  // 多路复用显示（非阻塞）
  if (currentTime - lastScan >= 3) // 每 3ms 切换一次，总周期约为 15ms（5 个位置）
  {
    // 将分钟和秒钟分解为单独的数字
    int minuteTens = minutes / 10;  // 分钟的十位
    int minuteUnits = minutes % 10; // 分钟的个位
    int secondTens = seconds / 10;  // 秒钟的十位
    int secondUnits = seconds % 10; // 秒钟的个位

    // 根据当前扫描位置显示对应的数字或时钟点
    switch (scanPosition)
    {
    case 0: // 第 1 位（D1）显示分钟的十位
      displayDigit(minuteTens, 0);
      break;
    case 1: // 第 2 位（D2）显示分钟的个位
      displayDigit(minuteUnits, 1);
      break;
    case 2: // 第 3 位（D3）显示秒钟的十位
      displayDigit(secondTens, 2);
      break;
    case 3: // 第 4 位（D4）显示秒钟的个位
      displayDigit(secondUnits, 3);
      break;
    case 4: // 显示中间的时钟点
      displayColon();
      break;
    }

    // 更新扫描位置
    scanPosition++;
    if (scanPosition >= 5) // 5 个位置（4 个数字 + 时钟点）
      scanPosition = 0;
    lastScan = currentTime; // 更新扫描时间戳
  }

}